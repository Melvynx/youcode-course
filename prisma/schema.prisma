// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                    String  @id @default(cuid())
  userId                String
  type                  String
  provider              String
  providerAccountId     String
  refreshTokenExpiresIn String?
  refresh_token         String?
  access_token          String?
  expires_at            Int?
  token_type            String?
  scope                 String?
  id_token              String?
  session_state         String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now()) @map("created_at")

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts       Account[]
  sessions       Session[]
  ownedCourses   CourseOnUser[]
  createdCourses Course[]
  lessons        LessonOnUser[]
}

model Course {
  id           String      @id @default(cuid())
  name         String
  presentation String // markdown
  image        String
  createdAt    DateTime    @default(now())
  creatorId    String
  state        CourseState @default(DRAFT)

  creator User           @relation(fields: [creatorId], references: [id])
  lessons Lesson[]
  users   CourseOnUser[]
}

enum CourseState {
  DRAFT
  PUBLISHED
}

model Lesson {
  id      String      @id @default(cuid())
  name    String
  rank    String // A string that represents the order of the lesson
  content String // markdown
  state   LessonState @default(HIDDEN)

  createdAt DateTime       @default(now())
  course    Course         @relation(fields: [courseId], references: [id])
  courseId  String
  users     LessonOnUser[]
}

enum LessonState {
  HIDDEN
  PUBLISHED
  PUBLIC
}

model LessonOnUser {
  id        String   @id @default(cuid())
  userId    String
  lessonId  String
  progress  Progress @default(NOT_STARTED)
  createdAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id])
  lesson Lesson @relation(fields: [lessonId], references: [id])

  @@unique([userId, lessonId])
}

enum Progress {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
}

model CourseOnUser {
  id         String    @id @default(cuid())
  userId     String
  courseId   String
  createdAt  DateTime  @default(now())
  canceledAt DateTime?

  user   User   @relation(fields: [userId], references: [id])
  course Course @relation(fields: [courseId], references: [id])

  @@unique([userId, courseId])
}
